# -*- coding: utf-8 -*-
"""ParseWikipedia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HyXHXLN0mZwhvI2LQRghOg7RHFLJv-Di
"""
import wikipediaapi
de_wiki = wikipediaapi.Wikipedia('de') # load german wikipedia
import wikipedia as wiki
wiki.set_lang("de")

# TODO find solution when page is a disambiguate page..

def parse_wiki_page(title):
  ''' parses the german wikipedia page with that title and
  returns a list of sections with their id, title, and content'''
  page = de_wiki.page(title)
  if not page.exists(): # Return None if that page does not exist
    print('Page %s does not exist!' % title)
    return None
  if 'Kategorie:Begriffsklärung' in page.categories:
    print('Title needs clarification')
    return None
  
  def parse_sections(sections, content, section_id=[]):
    ''' recursively goes over all sections and subsections and
    creates the content list for the page'''
    section_number = 0
    for s in sections:
      section_number += 1
      content.append((section_id + [section_number], s.title, s.text))
      parse_sections(s.sections, content, section_id+[section_number])

  content = []
  parse_sections(page.sections, content)
  return content

parse_wiki_page('Informatik')

parse_wiki_page('API')

api_results = wiki.search('API')
print(api_results)

for page in api_results:
  print(parse_wiki_page(page))

"""#MediaWiki Search API
https://www.mediawiki.org/wiki/API:Search
"""

import requests
import html2text

session = requests.Session()

def wiki_search(query, parse_html=True):
  url = "https://de.wikipedia.org/w/api.php"
  params = {
      "action": "query",
      "format": "json",
      "list": "search",
      "srlimit": 25,
      "srsearch": query
  }

  response = session.get(url=url, params=params)
  data = response.json()

  if parse_html:
    for sr in data['query']['search']:
      sr["title"] = sr["title"]
      sr["snippet"] = html2text.html2text(sr["snippet"])

  return data['query']['search']

### "title": "Welcher ist der größte Planet unseres Sonnensystems?",
# Adjektiv + Objekt
print(wiki_search("größter Planet")[0]["snippet"])

### "title": "Das erste Tier im Weltraum war ein(e) ...",
# Zusammen mit Antwort klappts:
print(wiki_search("Hündin Weltraum")[0]["snippet"])

### "title": "Wie viele Monate umfasst ein Quartal?",
print(wiki_search("Monate Quartal")[0]["snippet"])

### "title": "Wie viele Tage hat der Monat Juni?",
print(wiki_search("Tage Monat Juni")[0]["snippet"])

###  "title": "Was ist kein Planet unseres Sonnensystems?",
print([ a["title"] for a in wiki_search("Planet Sonnensystem Venus")])
print([ a["title"] for a in wiki_search("Planet Sonnensystem Uranus")])
print([ a["title"] for a in wiki_search("Planet Sonnensystem Saturn")])
print([ a["title"] for a in wiki_search("Planet Sonnensystem Vulkan")])


### oder
print(wiki_search("Venus")[0]["snippet"]) # "Sonnenentfernung"
print(wiki_search("Uranus")[0]["snippet"]) # "Sonne"
print(wiki_search("Saturn")[0]["snippet"]) # "Sonne", "Planet"
print(wiki_search("Vulkan")[0]["snippet"]) # -

### "title": "Wann flog die erste Frau ins Weltall?",
for a in wiki_search("erste frau weltall")[:3]:
  print(a["title"])
  print(a["snippet"])

print("---------------------------------------------------\n\n")

# weltraum statt weltall klappt!
for a in wiki_search("erste frau weltraum")[:3]:
  print(a["title"])
  print(a["snippet"])

###  "title": "Welche Raumstation fliegt seit 1998 im All?",
for a in wiki_search("Raumstation 1998")[:3]:
  print(a["title"])
  print(a["snippet"])

### "title": "Zu welcher Galaxis gehört die Erde?",
print(wiki_search("Galaxis Erde")[0]["snippet"])

### "title": "Wie nannte man den russischen Kaiser?",
print(wiki_search("russisch Kaiser")[0]["title"])
print(wiki_search("russisch Kaiser")[0]["snippet"])

### "title": "Was bedeutet Atatürk?",
# kein Glück hier
for a in wiki_search("Vater Atatürk")[:5]:
  print(a["title"])
  print(a["snippet"])

print("---------------------------------------------------\n\n")

### "title": "War Adolf Hitler \"reindeutsch\"?",  "a": "ja",    "b": "nein",
# keine chance bei kunstwörtern
print(wiki_search("Adolf Hitler reindeutsch")[0]["title"])
print(wiki_search("Adolf Hitler reindeutsch")[0]["snippet"])

print("---------------------------------------------------\n\n")

# ### "title": "Die Französische Revolution begann am 14.Juli 1789 mit dem Sturm der ..",
# for a in wiki_search("Französische Revolution Sturm")[:5]:
#   print(a["title"])
#   print(a["snippet"])

# ### "title": "Der Titel japanischer Oberbefehlshaber war früher?",
# # klappt zusammen mit antwort (aber nur ohne "japanisch")
# for a in wiki_search("Schogun Oberbefehlshaber")[:5]:
#   print(a["title"])
#   print(a["snippet"])

# ### "title": "In welchem Jahr sank die Titanic?",
# # klappt zusammen mit antwort
# for a in wiki_search("1912 Titanic")[:1]:
#   print(a["title"])
#   print(a["snippet"])

# ### "title": "Wie heißt der vierte Fastensonntag?",
# # snippet 2+3 hat die Antwort (achtung: Laetare vs Lätare aus unseren fragen)
# for a in wiki_search("Vierte Fastensonntag")[:3]:
#   print(a["title"])
#   print(a["snippet"])

# ### "title": "In welchen Jahren wurde Deutschland Fußballweltmeister der Herren?",
# # antwort "b": "1954, 1974 und 1990",
# # könnte man aus den snippets herleiten....
# for a in wiki_search("Deutschland Fußballweltmeister")[:3]:
#   print(a["title"])
#   print(a["snippet"])

# # title: "Wie heißt das Gegenteil des Vollmondes"
# # Erwartungsgemäß kein direkter Erfolg aber da die Frage als einfach klassifiziert ist, ist Neumond das einzige Wort welches im ersten Snippet vorkommt.
# for a in wiki_search('Gegenteil Vollmond')[:3]:
#   print(a['title'])
#   print(a['snippet'])

# title: "Welcher Planet wurde zuletzt entdeckt?"
# sieht nach einer sehr schwierigen Frage aus..
# hier würde mir nur eine sehr spezielle Lösung einfallen
for a in wiki_search('Planet zuletzt entdeckt')[:3]:
  print(a['title'])
  print(a['snippet'])